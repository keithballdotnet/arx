// Code generated by protoc-gen-go.
// source: src/github.com/keithballdotnet/arx/proto/arx.proto
// DO NOT EDIT!

/*
Package arx is a generated protocol buffer package.

It is generated from these files:
	src/github.com/keithballdotnet/arx/proto/arx.proto

It has these top-level messages:
	KeyMetadata
	CreateKeyRequest
	ListKeysRequest
*/
package arx

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// KeyMetadata is a representation of an Encryption Key
type KeyMetadata struct {
	KeyID                    string `protobuf:"bytes,1,opt,name=KeyID,json=keyID" json:"KeyID,omitempty"`
	CreationDate_RFC3339Nano string `protobuf:"bytes,2,opt,name=CreationDate_RFC3339Nano,json=creationDateRFC3339Nano" json:"CreationDate_RFC3339Nano,omitempty"`
	Description              string `protobuf:"bytes,3,opt,name=Description,json=description" json:"Description,omitempty"`
	Enabled                  bool   `protobuf:"varint,4,opt,name=Enabled,json=enabled" json:"Enabled,omitempty"`
}

func (m *KeyMetadata) Reset()                    { *m = KeyMetadata{} }
func (m *KeyMetadata) String() string            { return proto.CompactTextString(m) }
func (*KeyMetadata) ProtoMessage()               {}
func (*KeyMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// CreateKeyRequest will create a key
type CreateKeyRequest struct {
	Description string `protobuf:"bytes,1,opt,name=Description,json=description" json:"Description,omitempty"`
}

func (m *CreateKeyRequest) Reset()                    { *m = CreateKeyRequest{} }
func (m *CreateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyRequest) ProtoMessage()               {}
func (*CreateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ListKeysRequest struct {
}

func (m *ListKeysRequest) Reset()                    { *m = ListKeysRequest{} }
func (m *ListKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*ListKeysRequest) ProtoMessage()               {}
func (*ListKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*KeyMetadata)(nil), "arx.KeyMetadata")
	proto.RegisterType((*CreateKeyRequest)(nil), "arx.CreateKeyRequest")
	proto.RegisterType((*ListKeysRequest)(nil), "arx.ListKeysRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Arx service

type ArxClient interface {
	//
	// Creates a new key
	//
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*KeyMetadata, error)
	//
	// Stream a list of keys back to the client
	//
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (Arx_ListKeysClient, error)
}

type arxClient struct {
	cc *grpc.ClientConn
}

func NewArxClient(cc *grpc.ClientConn) ArxClient {
	return &arxClient{cc}
}

func (c *arxClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*KeyMetadata, error) {
	out := new(KeyMetadata)
	err := grpc.Invoke(ctx, "/arx.arx/CreateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arxClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (Arx_ListKeysClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Arx_serviceDesc.Streams[0], c.cc, "/arx.arx/ListKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &arxListKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Arx_ListKeysClient interface {
	Recv() (*KeyMetadata, error)
	grpc.ClientStream
}

type arxListKeysClient struct {
	grpc.ClientStream
}

func (x *arxListKeysClient) Recv() (*KeyMetadata, error) {
	m := new(KeyMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Arx service

type ArxServer interface {
	//
	// Creates a new key
	//
	CreateKey(context.Context, *CreateKeyRequest) (*KeyMetadata, error)
	//
	// Stream a list of keys back to the client
	//
	ListKeys(*ListKeysRequest, Arx_ListKeysServer) error
}

func RegisterArxServer(s *grpc.Server, srv ArxServer) {
	s.RegisterService(&_Arx_serviceDesc, srv)
}

func _Arx_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ArxServer).CreateKey(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Arx_ListKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArxServer).ListKeys(m, &arxListKeysServer{stream})
}

type Arx_ListKeysServer interface {
	Send(*KeyMetadata) error
	grpc.ServerStream
}

type arxListKeysServer struct {
	grpc.ServerStream
}

func (x *arxListKeysServer) Send(m *KeyMetadata) error {
	return x.ServerStream.SendMsg(m)
}

var _Arx_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arx.arx",
	HandlerType: (*ArxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _Arx_CreateKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListKeys",
			Handler:       _Arx_ListKeys_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x50, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0xc4, 0x94, 0xd2, 0x76, 0x73, 0xa0, 0x58, 0x45, 0x58, 0x9c, 0xaa, 0x9c, 0x38, 0x25, 0xa8,
	0x41, 0x48, 0x3d, 0x37, 0x20, 0x21, 0x1e, 0x87, 0xfc, 0x00, 0x72, 0x92, 0x15, 0x44, 0x0d, 0x71,
	0xb0, 0x37, 0x12, 0xfc, 0x0a, 0x5f, 0x8b, 0x6d, 0x5e, 0x51, 0xe0, 0x36, 0xb3, 0xb3, 0x33, 0x6b,
	0x0f, 0xac, 0x8c, 0x2e, 0xe2, 0xc7, 0x8a, 0x9e, 0xba, 0x3c, 0x2a, 0xd4, 0x73, 0xbc, 0x45, 0x8b,
	0x73, 0x59, 0xd7, 0xa5, 0xa2, 0x06, 0x29, 0x96, 0xfa, 0x35, 0x6e, 0xb5, 0x22, 0xe5, 0x50, 0xe4,
	0x11, 0x1f, 0x59, 0x18, 0xbe, 0x33, 0x08, 0x6e, 0xf0, 0xed, 0x0e, 0x49, 0x96, 0x92, 0x24, 0x5f,
	0xc0, 0xd8, 0xd2, 0xeb, 0x54, 0xb0, 0x25, 0x3b, 0x9d, 0x65, 0xe3, 0xad, 0x23, 0x7c, 0x0d, 0x62,
	0xa3, 0x51, 0x52, 0xa5, 0x9a, 0x54, 0x12, 0x3e, 0x64, 0x57, 0x9b, 0x24, 0x49, 0xd6, 0xf7, 0xb2,
	0x51, 0x62, 0xd7, 0x2f, 0x1e, 0x17, 0x3d, 0xbd, 0x27, 0xf3, 0x25, 0x04, 0x29, 0x9a, 0x42, 0x57,
	0xad, 0x53, 0xc5, 0xc8, 0x6f, 0x07, 0xe5, 0xef, 0x88, 0x0b, 0x98, 0x5c, 0x36, 0x32, 0xaf, 0xb1,
	0x14, 0x7b, 0x56, 0x9d, 0x66, 0x13, 0xfc, 0xa4, 0xe1, 0x39, 0xcc, 0xfd, 0x59, 0xb4, 0x4f, 0xca,
	0xf0, 0xa5, 0x43, 0x43, 0xc3, 0x3c, 0xf6, 0x27, 0x2f, 0x3c, 0x84, 0x83, 0xdb, 0xca, 0x90, 0xf5,
	0x98, 0x2f, 0xd3, 0xaa, 0x03, 0xf7, 0x59, 0x7e, 0x01, 0xb3, 0x9f, 0x3c, 0x7e, 0x14, 0xb9, 0x2a,
	0x86, 0xf9, 0x27, 0x73, 0x3f, 0xee, 0x55, 0x12, 0xee, 0x58, 0xdf, 0xf4, 0x3b, 0x91, 0x2f, 0xbc,
	0x3e, 0x38, 0xf0, 0x9f, 0xeb, 0x8c, 0xe5, 0xfb, 0xbe, 0xe8, 0xe4, 0x23, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0xe0, 0x69, 0x9b, 0x9e, 0x01, 0x00, 0x00,
}
